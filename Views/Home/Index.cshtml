@model ObiletJourneySearch.Models.ViewModels.SearchViewModel
@{
    ViewData["Title"] = "Otobüs Seyahati Arama";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <style>
        /* Loading button styles */
        #searchButton:disabled {
            opacity: 0.85;
            cursor: not-allowed;
        }
        .card {
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            max-width: 400px;
            margin: 0 auto;
        }
        
        .card-header {
            background-color: #0064ff;
            color: white;
            font-weight: 600;
            padding: 15px;
            border-radius: 8px 8px 0 0 !important;
        }
        
        /* Select2 custom styling to match reference */
        .select2-container--default .select2-selection--single {
            border: 1px solid #ced4da;
            border-radius: 4px;
            height: 42px;
        }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 42px;
            padding-left: 35px; /* Space for icon */
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 40px;
        }

        .select2-dropdown {
            border: 1px solid #ced4da;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        /* Placeholder styling */
        .select2-container--default .select2-selection--single .select2-selection__placeholder {
            color: #6c757d;
        }

        /* Location labels */
        .location-label {
            font-weight: 600;
            color: #0064ff;
            margin-bottom: 8px;
            margin-top: 12px;
        }
        
        /* Field with icon */
        .field-with-icon {
            position: relative;
        }
        
        .field-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            z-index: 10;
        }
        
        /* Swap button styling */
        .swap-button-container {
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* Date field styling */
        .date-container .form-control {
            height: 42px;
        }
        
        /* Search button */
        .search-button {
            background-color: #0064ff;
            border-color: #0064ff;
            padding: 10px;
            font-weight: 600;
            font-size: 16px;
            border-radius: 4px;
        }
        
        .date-buttons .btn {
            border: 1px solid #ced4da;
            background-color: #f8f9fa;
            color: #212529;
            font-weight: 500;
        }
        
        .date-buttons .btn:focus {
            box-shadow: none;
            border-color: #3949AB;
        }
        
        .rotate-swap {
            transition: transform 0.5s;
            transform: rotate(180deg);
        }
    </style>
}

<div class="container journey-search-container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white">
                </div>
                <div class="card-body pt-0">
                    <form asp-controller="Journey" asp-action="Index" method="get">
                        <div class="mb-2">
                            <div class="location-label">Nereden</div>
                            <div class="field-with-icon">
                                <i class="bi bi-geo-alt field-icon"></i>
                                <select id="originSelect" name="originId" class="form-select" required>
                                    <option value="">Kalkış Yeri Seçin</option>
                                </select>
                                <input type="hidden" id="originName" name="originName" />
                            </div>
                        </div>
                        
                        <!-- Swap Button Container (between From and To) -->
                        <div class="text-end position-relative" style="height: 0;">
                            <button id="swapButton" type="button" class="btn btn-light swap-button rounded-circle" 
                                    style="position:absolute; right: 0; top: -5px; z-index:10; background-color:white;">
                                <i class="bi bi-arrow-down-up"></i>
                            </button>
                        </div>
                        
                        <div class="mb-3">
                            <div class="location-label">Nereye</div>
                            <div class="field-with-icon">
                                <i class="bi bi-geo-alt field-icon"></i>
                                <input type="hidden" id="destinationSearchInput" name="SearchDestination" asp-for="SearchDestination" />
                                <select id="destinationSelect" asp-for="DestinationId" class="search-select" style="width: 100%">
                                </select>
                                <input type="hidden" id="destinationName" name="destinationName" />
                                <span asp-validation-for="DestinationId" class="text-danger"></span>
                            </div>
                        </div>
                        
                        <!-- Date Field -->
                        <div>
                            <div class="location-label">Tarih</div>
                            <div class="field-with-icon mb-2">
                                <i class="bi bi-calendar-date field-icon"></i>
                                <input asp-for="Date" id="dateInput" class="form-control" type="date" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" style="padding-left: 35px;" />
                                <span asp-validation-for="Date" class="text-danger"></span>
                            </div>
                            <div class="date-buttons">
                                <div class="d-flex">
                                    <button type="button" id="todayBtn" class="btn btn-sm me-1 w-50">
                                        Bugün
                                    </button>
                                    <button type="button" id="tomorrowBtn" class="btn btn-sm ms-1 w-50">
                                        Yarın
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Search Button -->
                        <div class="mt-4">
                            <button id="searchButton" type="submit" class="btn btn-primary search-button w-100">
                                <span class="button-text">Bileti Bul</span>
                                <span class="spinner-border spinner-border-sm ms-2 d-none" role="status" aria-hidden="true"></span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        $(document).ready(function () {
            // Restore saved values from localStorage if they exist
            const savedOriginId = localStorage.getItem('obilet_originId');
            const savedOriginName = localStorage.getItem('obilet_originName');
            const savedDestinationId = localStorage.getItem('obilet_destinationId');
            const savedDestinationName = localStorage.getItem('obilet_destinationName');
            const savedDate = localStorage.getItem('obilet_date');
            
            // Check if the saved date is valid (not in the past)
            if (savedDate) {
                const today = new Date();
                today.setHours(0, 0, 0, 0); // Set to beginning of day for proper comparison
                
                const savedDateObj = new Date(savedDate);
                
                // If saved date is valid and not in the past, use it
                if (savedDateObj >= today) {
                    $('#dateInput').val(savedDate);
                } else {
                    // Otherwise, use tomorrow's date
                    const tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    const tomorrowFormatted = tomorrow.toISOString().split('T')[0];
                    $('#dateInput').val(tomorrowFormatted);
                    
                    // Update localStorage with new valid date
                    localStorage.setItem('obilet_date', tomorrowFormatted);
                }
            }
            
            // Restore origin if saved
            if (savedOriginId && savedOriginName) {
                const originOption = new Option(savedOriginName, savedOriginId, true, true);
                $('#originSelect').append(originOption).trigger('change');
            }
            
            // Restore destination if saved
            if (savedDestinationId && savedDestinationName) {
                const destinationOption = new Option(savedDestinationName, savedDestinationId, true, true);
                $('#destinationSelect').append(destinationOption).trigger('change');
            }
            // Initialize Select2 for origin field with AJAX search
            $('#originSelect').select2({
                placeholder: "Kalkış yeri için ara",
                allowClear: true,
                minimumInputLength: 0,
                language: {
                    inputTooShort: function() {
                        return "Lütfen en az 2 karakter girin";
                    },
                    noResults: function() {
                        return "Sonuç bulunamadı";
                    }
                },
                ajax: {
                    url: '@Url.Action("SearchBusLocations", "Home")',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data) {
                        if (data.success) {
                            return {
                                results: data.results
                            };
                        } else {
                            console.error("Error loading origin locations:", data.message);
                            return { results: [] };
                        }
                    },
                    cache: true
                }
            });

            // Initialize Select2 for destination field with AJAX search
            $('#destinationSelect').select2({
                placeholder: "Varış yeri için ara",
                allowClear: true,
                minimumInputLength: 0,
                language: {
                    inputTooShort: function() {
                        return "Lütfen en az 2 karakter girin";
                    },
                    noResults: function() {
                        return "Sonuç bulunamadı";
                    }
                },
                ajax: {
                    url: '@Url.Action("SearchBusLocations", "Home")',
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data) {
                        if (data.success) {
                            return {
                                results: data.results
                            };
                        } else {
                            console.error("Error loading destination locations:", data.message);
                            return { results: [] };
                        }
                    },
                    cache: true
                }
            });

            // Store the search term when users type in the search boxes
            $('#originSelect').on('select2:open', function() {
                const searchField = $('.select2-search__field').last();
                searchField.on('input', function() {
                    $('#originSearchInput').val($(this).val());
                });
            });
            
            // Save origin value when changed
            $('#originSelect').on('select2:select', function(e) {
                localStorage.setItem('obilet_originId', e.params.data.id);
                localStorage.setItem('obilet_originName', e.params.data.text);
                $('#originName').val(e.params.data.text); // Update hidden input
            });
            
            // Clear saved origin on clearing the selection
            $('#originSelect').on('select2:clear', function() {
                localStorage.removeItem('obilet_originId');
                localStorage.removeItem('obilet_originName');
            });

            $('#destinationSelect').on('select2:open', function() {
                const searchField = $('.select2-search__field').last();
                searchField.on('input', function() {
                    $('#destinationSearchInput').val($(this).val());
                });
            });
            
            // Save destination value when changed
            $('#destinationSelect').on('select2:select', function(e) {
                localStorage.setItem('obilet_destinationId', e.params.data.id);
                localStorage.setItem('obilet_destinationName', e.params.data.text);
                $('#destinationName').val(e.params.data.text); // Update hidden input
            });
            
            // Clear saved destination on clearing the selection
            $('#destinationSelect').on('select2:clear', function() {
                localStorage.removeItem('obilet_destinationId');
                localStorage.removeItem('obilet_destinationName');
            });
            
            // Save date when changed
            $('#dateInput').change(function() {
                localStorage.setItem('obilet_date', $(this).val());
            });
            
            // Trigger the change event to update localStorage
            $('#dateInput').trigger('change');
            
            // Handle Today button click
            $('#todayBtn').click(function() {
                const today = new Date();
                const formattedDate = today.toISOString().split('T')[0];
                $('#dateInput').val(formattedDate).trigger('change');
            });
            
            // Handle Tomorrow button click
            $('#tomorrowBtn').click(function() {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                const formattedDate = tomorrow.toISOString().split('T')[0];
                $('#dateInput').val(formattedDate).trigger('change');
            });

            // Handle swap button click
            $('#swapButton').click(function(e) {
                e.preventDefault();

                // Get current selected data
                const originId = $('#originSelect').val();
                const originText = $('#originSelect option:selected').text();
                const destinationId = $('#destinationSelect').val();
                const destinationText = $('#destinationSelect option:selected').text();

                // Clear both selects
                $('#originSelect').empty().val(null).trigger('change');
                $('#destinationSelect').empty().val(null).trigger('change');

                // Swap the values
                if (destinationId) {
                    var newOriginOption = new Option(destinationText, destinationId, true, true);
                    $('#originSelect').append(newOriginOption).trigger('change');
                    
                    // Update localStorage and hidden field after swap
                    localStorage.setItem('obilet_originId', destinationId);
                    localStorage.setItem('obilet_originName', destinationText);
                    $('#originName').val(destinationText); // Update hidden input field
                }

                if (originId) {
                    var newDestinationOption = new Option(originText, originId, true, true);
                    $('#destinationSelect').append(newDestinationOption).trigger('change');
                    
                    // Update localStorage and hidden field after swap
                    localStorage.setItem('obilet_destinationId', originId);
                    localStorage.setItem('obilet_destinationName', originText);
                    $('#destinationName').val(originText); // Update hidden input field
                }

                // Add a brief animation effect
                $('#swapButton').addClass('rotate-swap');
                setTimeout(function() {
                    $('#swapButton').removeClass('rotate-swap');
                }, 500);
            });
            
            // Validate that origin and destination are different
            $('form').submit(function(e) {
                const origin = $('#originSelect').val();
                const destination = $('#destinationSelect').val();
                const date = $('#Date').val();
                const originText = $('#originSelect option:selected').text();
                const destinationText = $('#destinationSelect option:selected').text();
                
                // Always update hidden fields with current selected text before submitting
                $('#originName').val(originText);
                $('#destinationName').val(destinationText);

                // Only validate when both fields have values
                if (origin && destination && origin === destination) {
                    // Show inline error message instead of alert
                    if ($('#location-error').length === 0) {
                        $('<div id="location-error" class="text-danger mt-2">Kalkış ve varış yeri aynı olamaz</div>')
                            .insertAfter('#destinationSelect');
                    }
                    e.preventDefault();
                    return false;
                } else {
                    // Remove error message if it exists
                    $('#location-error').remove();
                    
                    // Save values to localStorage on successful form submission
                    if (origin) localStorage.setItem('obilet_originId', origin);
                    if (originText) localStorage.setItem('obilet_originName', originText);
                    if (destination) localStorage.setItem('obilet_destinationId', destination);
                    if (destinationText) localStorage.setItem('obilet_destinationName', destinationText);
                    if (date) localStorage.setItem('obilet_date', date);
                    
                    // Show loading indicator and disable button
                    const searchButton = $('#searchButton');
                    searchButton.prop('disabled', true);
                    searchButton.find('.spinner-border').removeClass('d-none');
                    searchButton.find('.button-text').text('Aranıyor...');
                }
            });
        });
    </script>
    <style>
    
    </style>
}
